@page "/orderdetails/details"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@inject IOrderDetailService OrderDetailService
@inject NavigationManager NavigationManager

<PageTitle>Order Detail Details</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h1>Order Details</h1>
        </div>
        <div class="col text-end">
            <a href="/orderdetails" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Order Details List
            </a>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (error != null)
    {
        <div class="alert alert-danger" role="alert">
            @error
        </div>
    }
    else if (orderDetail == null)
    {
        <div class="alert alert-warning" role="alert">
            Order detail not found.
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="card-title">Order Information</h5>
                        <dl class="row">
                            <dt class="col-sm-4">Order ID</dt>
                            <dd class="col-sm-8">@orderDetail.OrderId</dd>
                            <dt class="col-sm-4">Order Date</dt>
                            <dd class="col-sm-8">@orderDetail.OrderDto?.OrderDate.ToString("MM/dd/yyyy")</dd>
                            <dt class="col-sm-4">Required Date</dt>
                            <dd class="col-sm-8">@orderDetail.OrderDto?.RequiredDate?.ToString("MM/dd/yyyy")</dd>
                            <dt class="col-sm-4">Shipped Date</dt>
                            <dd class="col-sm-8">@orderDetail.OrderDto?.ShippedDate?.ToString("MM/dd/yyyy")</dd>
                            <dt class="col-sm-4">Freight</dt>
                            <dd class="col-sm-8">@orderDetail.OrderDto?.Freight?.ToString("C")</dd>
                        </dl>
                    </div>
                    <div class="col-md-6">
                        <h5 class="card-title">Product Information</h5>
                        <dl class="row">
                            <dt class="col-sm-4">Product ID</dt>
                            <dd class="col-sm-8">@orderDetail.ProductId</dd>
                            <dt class="col-sm-4">Product Name</dt>
                            <dd class="col-sm-8">@orderDetail.ProductDto?.ProductName</dd>
                            <dt class="col-sm-4">Weight</dt>
                            <dd class="col-sm-8">@orderDetail.ProductDto?.Weight</dd>
                            <dt class="col-sm-4">Unit Price</dt>
                            <dd class="col-sm-8">@orderDetail.UnitPrice.ToString("C")</dd>
                            <dt class="col-sm-4">Units In Stock</dt>
                            <dd class="col-sm-8">@orderDetail.ProductDto?.UnitsInStock</dd>
                        </dl>
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-md-6">
                        <h5 class="card-title">Order Detail Information</h5>
                        <dl class="row">
                            <dt class="col-sm-4">Quantity</dt>
                            <dd class="col-sm-8">@orderDetail.Quantity</dd>
                            <dt class="col-sm-4">Discount</dt>
                            <dd class="col-sm-8">@orderDetail.Discount.ToString("P")</dd>
                            <dt class="col-sm-4">Total Amount</dt>
                            <dd class="col-sm-8">@((orderDetail.UnitPrice * orderDetail.Quantity * (1 - (decimal)orderDetail.Discount)).ToString("C"))</dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private OrderDetailDto? orderDetail;
    private bool isLoading = true;
    private string? error;

    [SupplyParameterFromQuery]
    private int OrderId { get; set; }

    [SupplyParameterFromQuery]
    private int ProductId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetail();
    }

    private async Task LoadOrderDetail()
    {
        try
        {
            isLoading = true;
            error = null;
            StateHasChanged();

            var response = await OrderDetailService.GetByIdAsync(OrderId, ProductId);
            if (response.Success && response.Data != null)
            {
                orderDetail = response.Data;
            }
            else
            {
                error = response.Message ?? "Failed to load order detail.";
            }
        }
        catch (Exception ex)
        {
            error = "Failed to load order detail. Please try again later.";
            Console.WriteLine($"Error loading order detail: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
