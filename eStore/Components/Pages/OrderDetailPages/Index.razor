@page "/orderdetails"
@using eStore.Models
@using eStore.Services
@using System.IO
@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer
@inject IOrderDetailService OrderDetailService
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Order Details</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-8">
            <h1>Order Details</h1>
        </div>
        <div class="col-4 text-end">
            <button class="btn btn-success" @onclick="ExportToExcel" disabled="@isExporting">
                @if (isExporting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span>Exporting...</span>
                }
                else
                {
                    <i class="bi bi-file-earmark-excel"></i>
                    <span>Export to Excel</span>
                }
            </button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass" role="alert">
            @message
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orderDetails?.Data?.Items == null || !orderDetails.Data.Items.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No Order Details Found</h4>
            <p>No order details are available in the system.</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Order ID</th>
                                <th>Order Date</th>
                                <th>Product Name</th>
                                <th>Unit Price</th>
                                <th>Quantity</th>
                                <th>Discount</th>
                                <th>Total</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in orderDetails.Data.Items)
                            {
                                <tr>
                                    <td>@item.OrderId</td>
                                    <td>@item.OrderDto?.OrderDate.ToString("MM/dd/yyyy")</td>
                                    <td>@item.ProductDto?.ProductName</td>
                                    <td>@item.UnitPrice.ToString("C")</td>
                                    <td>@item.Quantity</td>
                                    <td>@item.Discount.ToString("P")</td>
                                    <td>@((item.UnitPrice * item.Quantity * (1 - (decimal)item.Discount)).ToString("C"))</td>
                                    <td>
                                        <a class="btn btn-primary btn-sm" href="@($"orderdetails/details?orderid={item.OrderId}&productid={item.ProductId}")">
                                            <i class="bi bi-eye"></i> View Details
                                        </a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                @if (orderDetails.Data.TotalPages > 1)
                {
                    <nav aria-label="Order details pagination">
                        <ul class="pagination justify-content-center">
                            @if (orderDetails.Data.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <button type="button" class="page-link" @onclick="async () => await LoadOrderDetails(orderDetails.Data.PageNumber - 1)">
                                        <i class="bi bi-chevron-left"></i> Previous
                                    </button>
                                </li>
                            }

                            @for (int i = 1; i <= orderDetails.Data.TotalPages; i++)
                            {
                                var pageNumber = i;
                                <li class="page-item @(pageNumber == orderDetails.Data.PageNumber ? "active" : "")">
                                    <button type="button" class="page-link" @onclick="async () => await LoadOrderDetails(pageNumber)">@pageNumber</button>
                                </li>
                            }

                            @if (orderDetails.Data.HasNextPage)
                            {
                                <li class="page-item">
                                    <button type="button" class="page-link" @onclick="async () => await LoadOrderDetails(orderDetails.Data.PageNumber + 1)">
                                        Next <i class="bi bi-chevron-right"></i>
                                    </button>
                                </li>
                            }
                        </ul>
                    </nav>
                }

                <div class="text-center mt-3">
                    <small class="text-muted">
                        Showing @((orderDetails.Data.PageNumber - 1) * orderDetails.Data.PageSize + 1) to 
                        @(Math.Min(orderDetails.Data.PageNumber * orderDetails.Data.PageSize, orderDetails.Data.TotalItems)) 
                        of @orderDetails.Data.TotalItems order details
                    </small>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ApiResponse<PagedResponse<OrderDetailDto>>? orderDetails;
    private bool isLoading = true;
    private bool isExporting = false;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private const int PageSize = 10; // Set standard page size

    protected override async Task OnInitializedAsync()
    {
        await LoadOrderDetails(1); // Start with page 1
    }

    private async Task LoadOrderDetails(int page)
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            messageClass = string.Empty;
            StateHasChanged();

            Console.WriteLine($"Loading order details page {page} with page size {PageSize}");
            
            // Call API with pagination
            orderDetails = await OrderDetailService.GetAllAsync(
                pageNumber: page,
                pageSize: PageSize);

            if (orderDetails == null)
            {
                message = "Failed to get response from server";
                messageClass = "alert-danger";
                Console.WriteLine("Response is null");
                return;
            }

            if (!orderDetails.Success)
            {
                message = orderDetails.Message ?? "Failed to load order details";
                messageClass = "alert-warning";
                if (orderDetails.Errors != null)
                {
                    Console.WriteLine($"API Errors: {string.Join(", ", orderDetails.Errors)}");
                }
                return;
            }

            if (orderDetails.Data == null)
            {
                message = "No data received from server";
                messageClass = "alert-warning";
                Console.WriteLine("Response data is null");
                return;
            }

            Console.WriteLine($"Loaded {orderDetails.Data.Items?.Count ?? 0} order details (page {orderDetails.Data.PageNumber} of {orderDetails.Data.TotalPages})");
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading order details");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading order details. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while loading order details");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            isExporting = true;
            message = string.Empty;
            messageClass = string.Empty;
            StateHasChanged();
            
            // Call the service method to get Excel data
            var excelData = await OrderDetailService.ExportToExcelAsync();
            
            // Use the JavaScript interop method that works with the Orders page
            await JSRuntime.InvokeVoidAsync("downloadFileFromStream", 
                $"OrderDetails_Export_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx", 
                Convert.ToBase64String(excelData));
            
            message = "Excel file downloaded successfully.";
            messageClass = "alert-success";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            message = $"Error exporting to Excel: {ex.Message}";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error during Excel export");
        }
        finally
        {
            isExporting = false;
            StateHasChanged();
        }
    }
}
