@page "/categories/delete/{CategoryId:int}"
@rendermode InteractiveServer
@using eStore.Models
@using eStore.Services
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<PageTitle>Delete Category</PageTitle>

<h1>Delete</h1>

@if (errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (category is null)
{
    <p>Category not found.</p>
    <a href="/categories" class="btn btn-secondary">Back to List</a>
}
else
{
    <div class="alert alert-warning" role="alert">
        <p>Are you sure you want to delete this category?</p>
    </div>

    <div>
        <h2>Category</h2>
        <hr />
        <dl class="row">
            <dt class="col-sm-2">Category Name</dt>
            <dd class="col-sm-10">@category.CategoryName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@category.Description</dd>
        </dl>

        <EditForm method="post" Model="category" OnValidSubmit="DeleteCategory" FormName="delete">
            <input type="hidden" name="CategoryId" value="@CategoryId" />
            <button type="submit" class="btn btn-danger" disabled="@isDeleting">
                @if (isDeleting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span> Deleting...</span>
                }
                else
                {
                    <span>Delete</span>
                }
            </button>
            <a href="/categories" class="btn btn-secondary ms-2">Back to List</a>
        </EditForm>
    </div>
}

@code {
    [Parameter]
    public int CategoryId { get; set; }

    private Category? category;
    private bool isLoading = true;
    private bool isDeleting = false;
    private string? errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    private async Task LoadCategory()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            category = await CategoryService.GetCategoryByIdAsync(CategoryId);

            if (category is null)
            {
                NavigationManager.NavigateTo("notfound");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteCategory()
    {
        try
        {
            isDeleting = true;
            errorMessage = null;

            bool result = await CategoryService.DeleteCategoryAsync(CategoryId);

            if (result)
            {
                NavigationManager.NavigateTo("/categories");
            }
            else
            {
                errorMessage = "Failed to delete category. It may have been removed or you don't have permission.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
        }
    }
}