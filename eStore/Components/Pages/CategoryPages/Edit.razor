@page "/categories/edit/{Id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ILogger<Edit> Logger

<PageTitle>Edit Category</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="bi bi-pencil-square me-2"></i>Edit Category</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/categories">Categories</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Edit</li>
                </ol>
            </nav>
        </div>
        <a href="/categories" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading category data...</p>
        </div>
    }
    else if (category == null)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            Category not found. The category may have been deleted.
        </div>
        <div class="mt-3">
            <a href="/categories" class="btn btn-primary">
                <i class="bi bi-arrow-left"></i> Back to Categories
            </a>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-header bg-light">
                <h5 class="card-title mb-0">Category Information</h5>
            </div>
            <div class="card-body">
                <EditForm Model="category" OnValidSubmit="HandleValidSubmit" FormName="categoryForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="mb-3">
                        <label class="form-label">Category ID</label>
                        <input type="text" class="form-control" value="@category.CategoryId" disabled />
                    </div>

                    <div class="mb-3">
                        <label for="categoryName" class="form-label">Category Name</label>
                        <InputText id="categoryName" @bind-Value="category.CategoryName" class="form-control" />
                        <ValidationMessage For="() => category.CategoryName" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputTextArea id="description" @bind-Value="category.Description" class="form-control" rows="3" />
                        <ValidationMessage For="() => category.Description" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <a href="/categories" class="btn btn-secondary">
                            <i class="bi bi-x-circle"></i> Cancel
                        </a>
                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="bi bi-save"></i>
                                <span>Save Changes</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Category? category;
    private string errorMessage = string.Empty;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategory();
    }

    private async Task LoadCategory()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await CategoryService.GetCategoryByIdAsync(Id);
            
            if (response.Success && response.Data != null)
            {
                category = response.Data;
                Logger.LogInformation("Category loaded successfully: {CategoryId} - {CategoryName}", 
                    category.CategoryId, category.CategoryName);
            }
            else
            {
                errorMessage = response.Message ?? $"Category with ID {Id} not found";
                Logger.LogWarning("Failed to load category: {ErrorMessage}", errorMessage);
                category = null;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while loading the category";
            Logger.LogError(ex, "Error loading category: {ErrorMessage}", ex.Message);
            category = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (category == null) return;

        try
        {
            isSubmitting = true;
            
            Logger.LogInformation("Updating category: {CategoryId} - {CategoryName}", 
                category.CategoryId, category.CategoryName);
            
            var response = await CategoryService.UpdateCategoryAsync(Id, category);
            
            if (response.Success)
            {
                Logger.LogInformation("Category updated successfully: {CategoryId}", Id);
                NavigationManager.NavigateTo("/categories");
            }
            else
            {
                errorMessage = response.Message ?? "Failed to update category";
                if (response.Errors != null && response.Errors.Any())
                {
                    errorMessage += $": {string.Join(", ", response.Errors)}";
                }
                Logger.LogWarning("Failed to update category: {ErrorMessage}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while updating the category";
            Logger.LogError(ex, "Error updating category: {ErrorMessage}", ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
