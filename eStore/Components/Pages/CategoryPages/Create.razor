@page "/categories/create"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ILogger<Create> Logger

<PageTitle>Create Category</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2><i class="bi bi-plus-circle me-2"></i>Create Category</h2>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/categories">Categories</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Create</li>
                </ol>
            </nav>
        </div>
        <a href="/categories" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Back to List
        </a>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-header bg-light">
            <h5 class="card-title mb-0">Category Information</h5>
        </div>
        <div class="card-body">
            <EditForm Model="category" OnValidSubmit="HandleValidSubmit" FormName="categoryForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="mb-3">
                    <label for="categoryName" class="form-label">Category Name</label>
                    <InputText id="categoryName" @bind-Value="category.CategoryName" class="form-control" />
                    <ValidationMessage For="() => category.CategoryName" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" @bind-Value="category.Description" class="form-control" rows="3" />
                    <ValidationMessage For="() => category.Description" class="text-danger" />
                </div>

                <div class="d-flex justify-content-end gap-2 mt-4">
                    <a href="/categories" class="btn btn-secondary">
                        <i class="bi bi-x-circle"></i> Cancel
                    </a>
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <i class="bi bi-save"></i>
                            <span>Create Category</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Category category = new Category();
    private string errorMessage = string.Empty;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            isSubmitting = true;
            
            Logger.LogInformation("Creating new category: {CategoryName}", category.CategoryName);
            var response = await CategoryService.CreateCategoryAsync(category);
            
            if (response.Success && response.Data != null)
            {
                Logger.LogInformation("Category created successfully with ID: {CategoryId}", response.Data.CategoryId);
                NavigationManager.NavigateTo("/categories");
            }
            else
            {
                errorMessage = response.Message ?? "Failed to create category";
                if (response.Errors != null && response.Errors.Any())
                {
                    errorMessage += $": {string.Join(", ", response.Errors)}";
                }
                Logger.LogWarning("Failed to create category: {ErrorMessage}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the category";
            Logger.LogError(ex, "Error creating category: {ErrorMessage}", ex.Message);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
