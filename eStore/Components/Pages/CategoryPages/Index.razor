@page "/categories"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger
@implements IAsyncDisposable

<PageTitle>Categories</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2><i class="bi bi-tag-fill me-2"></i>Categories</h2>
        <a href="/categories/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add New Category
        </a>
    </div>

    <div class="card shadow-sm mb-4">
        <div class="card-header bg-light">
            <h5 class="card-title mb-0">Search Categories</h5>
        </div>
        <div class="card-body">
            <form @onsubmit="HandleSearch" class="row g-3">
                <div class="col-md-12">
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="search" @bind="searchTerm" 
                               placeholder="Search category name or description..." />
                        <button type="submit" class="btn btn-primary">
                            Search
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="ClearFilters">
                            Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass alert-dismissible fade show" role="alert">
            <i class="bi @(messageClass == "alert-success" ? "bi-check-circle" : messageClass == "alert-info" ? "bi-info-circle" : "bi-exclamation-triangle") me-2"></i>
            @message
            <button type="button" class="btn-close" @onclick="() => message = string.Empty"></button>
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading categories...</p>
        </div>
    }
    else if (categories?.Items == null || !categories.Items.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading"><i class="bi bi-info-circle me-2"></i>No Categories Found</h4>
            <p>We couldn't find any categories matching your search criteria.</p>
            <hr>
            <p class="mb-0">
                Try these suggestions:
                <ul class="mb-0">
                    <li>Try a different search term</li>
                    <li>Clear all filters and try again</li>
                    <li>Check if there are any categories in the database</li>
                </ul>
            </p>
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-striped table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>ID</th>
                                <th>Category Name</th>
                                <th>Description</th>
                                <th class="text-end">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in categories.Items)
                            {
                                <tr>
                                    <td>@category.CategoryId</td>
                                    <td>@category.CategoryName</td>
                                    <td>@category.Description</td>
                                    <td class="text-end">
                                        <div class="btn-group" role="group">
                                            <a href="/categories/details/@category.CategoryId" class="btn btn-sm btn-info me-1">
                                                <i class="bi bi-eye"></i> Details
                                            </a>
                                            <a href="/categories/edit/@category.CategoryId" class="btn btn-sm btn-primary me-1">
                                                <i class="bi bi-pencil"></i> Edit
                                            </a>
                                            <a href="/categories/delete/@category.CategoryId" class="btn btn-sm btn-danger">
                                                <i class="bi bi-trash"></i> Delete
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        @if (categories.TotalPages > 1)
        {
            <nav aria-label="Category pagination" class="mt-4">
                <ul class="pagination justify-content-center">
                    @if (categories.HasPreviousPage)
                    {
                        <li class="page-item">
                            <button type="button" class="page-link" @onclick="async () => await LoadCategories(categories.PageNumber - 1)">
                                <i class="bi bi-chevron-left"></i> Previous
                            </button>
                        </li>
                    }

                    @for (int i = 1; i <= categories.TotalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == categories.PageNumber ? "active" : "")">
                            <button type="button" class="page-link" @onclick="async () => await LoadCategories(pageNumber)">@pageNumber</button>
                        </li>
                    }

                    @if (categories.HasNextPage)
                    {
                        <li class="page-item">
                            <button type="button" class="page-link" @onclick="async () => await LoadCategories(categories.PageNumber + 1)">
                                Next <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    }
                </ul>
            </nav>
        }

        <div class="text-center mt-3">
            <small class="text-muted">
                Showing @((categories.PageNumber - 1) * categories.PageSize + 1) to 
                @(Math.Min(categories.PageNumber * categories.PageSize, categories.TotalItems)) 
                of @categories.TotalItems categories
            </small>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private PagedResponse<Category>? categories;
    private string searchTerm = string.Empty;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private const int PageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
        await LoadCategories(1);
    }

    private async Task InitializeSignalR()
    {
        try
        {
            Logger.LogInformation("Starting SignalR connection setup for categories...");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/categoryhub"))
                .WithAutomaticReconnect()
                .Build();

            Logger.LogInformation("SignalR hub connection built. Setting up event handler...");
            
            hubConnection.On<string, int>("ReceiveCategoryUpdate", (action, categoryId) =>
            {
                Logger.LogWarning("⭐ RECEIVED CATEGORY UPDATE: {Action} for category {CategoryId} ⭐", action, categoryId);
                Console.WriteLine($"⭐ RECEIVED CATEGORY UPDATE: {action} for category {categoryId} ⭐");
                
                _ = InvokeAsync(async () => 
                {
                    await LoadCategories(categories?.PageNumber ?? 1);
                    StateHasChanged();
                });
                
                return Task.CompletedTask;
            });

            // Add handler for reconnection events
            hubConnection.Reconnecting += (exception) =>
            {
                Logger.LogWarning("SignalR attempting to reconnect: {Exception}", exception?.Message);
                Console.WriteLine($"SignalR attempting to reconnect: {exception?.Message}");
                return Task.CompletedTask;
            };

            hubConnection.Reconnected += (connectionId) =>
            {
                Logger.LogInformation("SignalR reconnected with ID: {ConnectionId}", connectionId);
                Console.WriteLine($"SignalR reconnected with ID: {connectionId}");
                return Task.CompletedTask;
            };

            hubConnection.Closed += (exception) =>
            {
                Logger.LogWarning("SignalR connection closed: {Exception}", exception?.Message);
                Console.WriteLine($"SignalR connection closed: {exception?.Message}");
                return Task.CompletedTask;
            };

            // Start the connection
            Logger.LogInformation("Starting SignalR connection...");
            await hubConnection.StartAsync();
            Logger.LogWarning("✅ SignalR Connected for Categories. Connection ID: {ConnectionId}", hubConnection.ConnectionId);
            Console.WriteLine($"✅ SignalR Connected for Categories. Connection ID: {hubConnection.ConnectionId}");
            
            // Test if the connection is active
            if (hubConnection.State == HubConnectionState.Connected)
            {
                Logger.LogInformation("Connection confirmed in Connected state");
            }
            else
            {
                Logger.LogWarning("Connection not in Connected state. Current state: {State}", hubConnection.State);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "⚠️ SignalR Connection Error for Categories hub: {Message}", ex.Message);
            Console.WriteLine($"⚠️ SignalR Connection Error for Categories hub: {ex.Message}");
            message = "Unable to connect to real-time updates.";
            messageClass = "alert-warning";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ClearFilters()
    {
        searchTerm = string.Empty;
        await LoadCategories(1);
    }

    private async Task HandleSearch()
    {
        await LoadCategories(1);
    }

    private async Task LoadCategories(int pageNumber = 1)
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            StateHasChanged();

            Logger.LogInformation("Loading categories with search term: {SearchTerm}", 
                string.IsNullOrEmpty(searchTerm) ? "(none)" : searchTerm);

            var response = await CategoryService.GetAllCategoriesAsync(
                pageNumber: pageNumber,
                pageSize: PageSize,
                search: string.IsNullOrWhiteSpace(searchTerm) ? null : searchTerm
            );

            if (response.Success)
            {
                categories = response.Data;
                Logger.LogInformation("Successfully loaded {Count} categories", categories?.Items?.Count ?? 0);
                
                if (categories?.Items?.Count == 0)
                {
                    message = "No categories found matching your criteria.";
                    messageClass = "alert-info";
                }
            }
            else
            {
                message = response.Message ?? "Failed to load categories";
                messageClass = "alert-danger";
                Logger.LogWarning("Failed to load categories: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading categories";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error loading categories");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
