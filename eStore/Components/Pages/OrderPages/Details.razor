@page "/orders/details/{id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IOrderService OrderService
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Details> Logger

<PageTitle>Order Details</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2>Order Details</h2>
        <div>
            <a href="/orders" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Back to List
            </a>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass" role="alert">
            @message
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (order == null)
    {
        <div class="alert alert-warning" role="alert">
            <h4 class="alert-heading">Order Not Found</h4>
            <p>The order you are looking for does not exist or has been deleted.</p>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h5 class="card-title mb-3">Order Information</h5>
                        <div class="mb-2">
                            <span class="fw-bold">Order ID:</span>
                            <span class="ms-2">@order.OrderId</span>
                        </div>
                        <div class="mb-2">
                            <span class="fw-bold">Member:</span>
                            <span class="ms-2">
                                @if (member != null)
                                {
                                    @($"{member.CompanyName} ({member.Email})")
                                }
                                else
                                {
                                    @($"Member ID: {order.MemberId}")
                                }
                            </span>
                        </div>
                        <div class="mb-2">
                            <span class="fw-bold">Order Date:</span>
                            <span class="ms-2">@order.OrderDate.ToString("yyyy-MM-dd")</span>
                        </div>
                        <div class="mb-2">
                            <span class="fw-bold">Required Date:</span>
                            <span class="ms-2">@(order.RequiredDate?.ToString("yyyy-MM-dd") ?? "Not specified")</span>
                        </div>
                        <div class="mb-2">
                            <span class="fw-bold">Shipped Date:</span>
                            <span class="ms-2">@(order.ShippedDate?.ToString("yyyy-MM-dd") ?? "Not shipped yet")</span>
                        </div>
                        <div class="mb-2">
                            <span class="fw-bold">Freight:</span>
                            <span class="ms-2">$@(order.Freight?.ToString("0.00") ?? "0.00")</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="d-flex justify-content-end">
                    <a href="/orders/edit/@order.OrderId" class="btn btn-primary me-2">
                        <i class="bi bi-pencil"></i> Edit
                    </a>
                    <a href="/orders/delete/@order.OrderId" class="btn btn-danger">
                        <i class="bi bi-trash"></i> Delete
                    </a>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Order? order;
    private Member? member;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            
            var response = await OrderService.GetOrderByIdAsync(Id);
            if (response == null)
            {
                message = "Failed to get response from server";
                messageClass = "alert-danger";
                return;
            }

            if (!response.Success || response.Data == null)
            {
                message = response.Message ?? "Order not found";
                messageClass = "alert-warning";
                if (response.Errors != null)
                {
                    Logger.LogWarning("API Errors: {Errors}", string.Join(", ", response.Errors));
                }
                return;
            }

            order = response.Data;
            
            // Load member data
            if (order.MemberId > 0)
            {
                try
                {
                    member = await MemberService.GetMemberByIdAsync(order.MemberId);
                    if (member == null)
                    {
                        Logger.LogWarning("Could not find member with ID {MemberId}", order.MemberId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error loading member with ID {MemberId}", order.MemberId);
                }
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading order details");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading order details. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while loading order details");
        }
        finally
        {
            isLoading = false;
        }
    }
}
