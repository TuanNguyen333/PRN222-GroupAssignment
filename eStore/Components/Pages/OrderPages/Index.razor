@page "/orders"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject IOrderService OrderService
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger

<PageTitle>Orders</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Orders</h2>
        <a href="/orders/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add New Order
        </a>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <form @onsubmit="HandleSearch" class="row g-3">
                <div class="col-md-3">
                    <label for="minFreight" class="form-label">Min Freight ($)</label>
                    <input type="number" class="form-control" id="minFreight" @bind="minFreight" min="0" step="0.01">
                </div>
                <div class="col-md-3">
                    <label for="maxFreight" class="form-label">Max Freight ($)</label>
                    <input type="number" class="form-control" id="maxFreight" @bind="maxFreight" min="0" step="0.01">
                </div>
                <div class="col-md-3">
                    <label for="fromDate" class="form-label">From Date</label>
                    <input type="date" class="form-control" id="fromDate" @bind="fromDate">
                </div>
                <div class="col-md-3">
                    <label for="toDate" class="form-label">To Date</label>
                    <input type="date" class="form-control" id="toDate" @bind="toDate">
                </div>
                <div class="col-12 d-flex justify-content-end mt-3">
                    <div class="d-grid gap-2 d-md-flex">
                        <button type="submit" class="btn btn-primary me-2">
                            <i class="bi bi-search"></i> Search
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="ClearFilters">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass" role="alert">
            @message
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders?.Items == null || !orders.Items.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No Orders Found</h4>
            <p>We couldn't find any orders matching your search criteria.</p>
            <hr>
            <p class="mb-0">
                Try these suggestions:
                <ul class="mb-0">
                    <li>Adjust the date range</li>
                    <li>Try adjusting the freight range</li>
                    <li>Clear all filters and try again</li>
                    <li>Check if there are any orders in the database</li>
                </ul>
            </p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Order ID</th>
                        <th>Member</th>
                        <th>Order Date</th>
                        <th>Required Date</th>
                        <th>Shipped Date</th>
                        <th>Freight</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders.Items)
                    {
                        <tr>
                            <td>@order.OrderId</td>
                            <td>
                                @if (memberInfo.TryGetValue(order.MemberId, out var memberName))
                                {
                                    @memberName
                                }
                                else
                                {
                                    @($"Member ID: {order.MemberId}")
                                }
                            </td>
                            <td>@order.OrderDate.ToString("yyyy-MM-dd")</td>
                            <td>@(order.RequiredDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                            <td>@(order.ShippedDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                            <td>$@(order.Freight?.ToString("0.00") ?? "0.00")</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/orders/details/@order.OrderId" class="btn btn-sm btn-info me-1">
                                        <i class="bi bi-eye"></i> Details
                                    </a>
                                    <a href="/orders/edit/@order.OrderId" class="btn btn-sm btn-primary me-1">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                    <a href="/orders/delete/@order.OrderId" class="btn btn-sm btn-danger">
                                        <i class="bi bi-trash"></i> Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (orders.TotalPages > 1)
        {
            <nav aria-label="Order pagination">
                <ul class="pagination justify-content-center">
                    @if (orders.HasPreviousPage)
                    {
                        <li class="page-item">
                            <button type="button" class="page-link" @onclick="async () => await LoadOrders(orders.PageNumber - 1)">
                                <i class="bi bi-chevron-left"></i> Previous
                            </button>
                        </li>
                    }

                    @for (int i = 1; i <= orders.TotalPages; i++)
                    {
                        var pageNumber = i;
                        <li class="page-item @(pageNumber == orders.PageNumber ? "active" : "")">
                            <button type="button" class="page-link" @onclick="async () => await LoadOrders(pageNumber)">@pageNumber</button>
                        </li>
                    }

                    @if (orders.HasNextPage)
                    {
                        <li class="page-item">
                            <button type="button" class="page-link" @onclick="async () => await LoadOrders(orders.PageNumber + 1)">
                                Next <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                    }
                </ul>
            </nav>
        }

        <div class="text-center mt-3">
            <small class="text-muted">
                Showing @((orders.PageNumber - 1) * orders.PageSize + 1) to 
                @(Math.Min(orders.PageNumber * orders.PageSize, orders.TotalItems)) 
                of @orders.TotalItems orders
            </small>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private PagedResponse<Order>? orders;
    private Dictionary<int, string> memberInfo = new();
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private decimal? minFreight;
    private decimal? maxFreight;
    private DateTime? fromDate;
    private DateTime? toDate;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
        await LoadOrders(1);
    }

    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/orderhub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, int>("ReceiveOrderUpdate", async (action, orderId) =>
            {
                Console.WriteLine($"Received order update: {action} for order {orderId}");
                await LoadOrders(orders?.PageNumber ?? 1);
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            Console.WriteLine("SignalR Connected");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignalR Connection Error: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ClearFilters()
    {
        minFreight = null;
        maxFreight = null;
        fromDate = null;
        toDate = null;
        await LoadOrders(1);
    }

    private async Task HandleSearch()
    {
        await LoadOrders(1);
        StateHasChanged();
    }

    private async Task LoadOrders(int page)
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            messageClass = string.Empty;
            
            Console.WriteLine($"Search parameters:");
            Console.WriteLine($"- Page: {page}");
            Console.WriteLine($"- Min Freight: {minFreight}");
            Console.WriteLine($"- Max Freight: {maxFreight}");
            Console.WriteLine($"- From Date: {fromDate}");
            Console.WriteLine($"- To Date: {toDate}");
            
            var response = await OrderService.GetAllOrdersAsync(
                pageNumber: page,
                pageSize: PageSize,
                minFreight: minFreight,
                maxFreight: maxFreight,
                fromDate: fromDate,
                toDate: toDate
            );

            if (response == null)
            {
                message = "Failed to get response from server";
                messageClass = "alert-danger";
                Console.WriteLine("Response is null");
                return;
            }

            if (!response.Success)
            {
                message = response.Message ?? "Failed to load orders";
                messageClass = "alert-warning";
                if (response.Errors != null)
                {
                    Console.WriteLine($"API Errors: {string.Join(", ", response.Errors)}");
                }
                return;
            }

            if (response.Data == null)
            {
                message = "No data received from server";
                messageClass = "alert-warning";
                Console.WriteLine("Response data is null");
                return;
            }

            orders = response.Data;
            Console.WriteLine($"Loaded response with {orders.TotalItems} total items, {orders.TotalPages} total pages");

            await LoadMemberNames();

            if (orders.Items == null || !orders.Items.Any())
            {
                message = "No orders found matching your search criteria.";
                messageClass = "alert-info";
                Console.WriteLine("No items in response data");
            }
            else
            {
                Console.WriteLine($"Showing {orders.Items.Count} orders on page {orders.PageNumber} of {orders.TotalPages}");
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading orders");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading orders. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error loading orders");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadMemberNames()
    {
        try
        {
            var uniqueMemberIds = orders!.Items.Select(o => o.MemberId).Distinct().ToList();
            
            foreach (var memberId in uniqueMemberIds)
            {
                if (!memberInfo.ContainsKey(memberId))
                {
                    var member = await MemberService.GetMemberByIdAsync(memberId);
                    if (member != null)
                    {
                        memberInfo[memberId] = $"{member.CompanyName} ({member.Email})";
                    }
                    else
                    {
                        memberInfo[memberId] = $"Member ID: {memberId}";
                    }
                }
            }
            
            Logger.LogInformation("Successfully loaded member information");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading member information");
        }
    }
}
