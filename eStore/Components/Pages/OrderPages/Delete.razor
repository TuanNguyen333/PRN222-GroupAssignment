@page "/orders/delete/{id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IOrderService OrderService
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Delete> Logger

<PageTitle>Delete Order</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card border-danger">
                <div class="card-header bg-danger text-white">
                    <h3 class="card-title mb-0">Confirm Delete</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @messageClass" role="alert">
                            @message
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (order == null)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading">Order Not Found</h4>
                            <p>The order you are trying to delete does not exist or has already been deleted.</p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning mb-4" role="alert">
                            <h4 class="alert-heading">Warning!</h4>
                            <p>Are you sure you want to delete this order? This action cannot be undone.</p>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <h5 class="mb-3">Order Information</h5>
                                <div class="mb-2">
                                    <span class="fw-bold">Order ID:</span>
                                    <span class="ms-2">@order.OrderId</span>
                                </div>
                                <div class="mb-2">
                                    <span class="fw-bold">Member:</span>
                                    <span class="ms-2">
                                        @if (member != null)
                                        {
                                            @($"{member.CompanyName} ({member.Email})")
                                        }
                                        else
                                        {
                                            @($"Member ID: {order.MemberId}")
                                        }
                                    </span>
                                </div>
                                <div class="mb-2">
                                    <span class="fw-bold">Order Date:</span>
                                    <span class="ms-2">@order.OrderDate.ToString("yyyy-MM-dd")</span>
                                </div>
                                <div class="mb-2">
                                    <span class="fw-bold">Required Date:</span>
                                    <span class="ms-2">@(order.RequiredDate?.ToString("yyyy-MM-dd") ?? "Not specified")</span>
                                </div>
                                <div class="mb-2">
                                    <span class="fw-bold">Shipped Date:</span>
                                    <span class="ms-2">@(order.ShippedDate?.ToString("yyyy-MM-dd") ?? "Not shipped yet")</span>
                                </div>
                                <div class="mb-2">
                                    <span class="fw-bold">Freight:</span>
                                    <span class="ms-2">$@(order.Freight?.ToString("0.00") ?? "0.00")</span>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <a href="/orders" class="btn btn-secondary">
                        <i class="bi bi-arrow-left"></i> Back to List
                    </a>
                    
                    @if (order != null && !isDeleting)
                    {
                        <button class="btn btn-danger" @onclick="DeleteOrder">
                            <i class="bi bi-trash"></i> Delete Order
                        </button>
                    }
                    else if (isDeleting)
                    {
                        <button class="btn btn-danger" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-1">Deleting...</span>
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Order? order;
    private Member? member;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrder();
    }

    private async Task LoadOrder()
    {
        try
        {
            isLoading = true;
            
            var response = await OrderService.GetOrderByIdAsync(Id);
            if (response == null)
            {
                message = "Failed to get response from server";
                messageClass = "alert-danger";
                return;
            }

            if (!response.Success || response.Data == null)
            {
                message = response.Message ?? "Order not found";
                messageClass = "alert-warning";
                if (response.Errors != null)
                {
                    Logger.LogWarning("API Errors: {Errors}", string.Join(", ", response.Errors));
                }
                return;
            }

            order = response.Data;
            
            // Load member data
            if (order.MemberId > 0)
            {
                try
                {
                    member = await MemberService.GetMemberByIdAsync(order.MemberId);
                    if (member == null)
                    {
                        Logger.LogWarning("Could not find member with ID {MemberId}", order.MemberId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "Error loading member with ID {MemberId}", order.MemberId);
                }
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading order details");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading order details. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while loading order details");
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private async Task DeleteOrder()
    {
        try
        {
            isDeleting = true;
            
            var response = await OrderService.DeleteOrderAsync(Id);
            if (response == null)
            {
                message = "Failed to get response from server";
                messageClass = "alert-danger";
                return;
            }

            if (!response.Success)
            {
                message = response.Message ?? "Failed to delete order";
                messageClass = "alert-danger";
                if (response.Errors != null)
                {
                    Logger.LogWarning("API Errors: {Errors}", string.Join(", ", response.Errors));
                }
                return;
            }

            message = "Order deleted successfully!";
            messageClass = "alert-success";
            await Task.Delay(1000);
            NavigationManager.NavigateTo("/orders", true);
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while deleting order");
        }
        catch (Exception ex)
        {
            message = "An error occurred while deleting the order. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while deleting order");
        }
        finally
        {
            isDeleting = false;
        }
    }
}
