@page "/profile/edit"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<EditProfile> Logger

<PageTitle>Edit Profile</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Edit Profile</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @messageClass" role="alert">
                            @message
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (member != null)
                    {
                        <EditForm Model="@member" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="email" class="form-label">Email</label>
                                <InputText id="email" class="form-control" @bind-Value="member.Email" />
                                <ValidationMessage For="@(() => member.Email)" />
                            </div>

                            <div class="mb-3">
                                <label for="password" class="form-label">Password (để trống nếu không muốn thay đổi)</label>
                                <InputText type="password" id="password" class="form-control" @bind-Value="member.Password" />
                                <ValidationMessage For="@(() => member.Password)" />
                            </div>

                            <div class="mb-3">
                                <label for="companyName" class="form-label">Company Name</label>
                                <InputText id="companyName" class="form-control" @bind-Value="member.CompanyName" />
                                <ValidationMessage For="@(() => member.CompanyName)" />
                            </div>

                            <div class="mb-3">
                                <label for="city" class="form-label">City</label>
                                <InputText id="city" class="form-control" @bind-Value="member.City" />
                                <ValidationMessage For="@(() => member.City)" />
                            </div>

                            <div class="mb-3">
                                <label for="country" class="form-label">Country</label>
                                <InputText id="country" class="form-control" @bind-Value="member.Country" />
                                <ValidationMessage For="@(() => member.Country)" />
                            </div>

                            <div class="mt-4">
                                <button type="submit" class="btn btn-primary me-2" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Changes</span>
                                    }
                                </button>
                                <button type="button" class="btn btn-secondary" @onclick="NavigateBack">Cancel</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private Member? member;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMemberInfo();
    }

    private async Task LoadMemberInfo()
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            messageClass = string.Empty;

            Logger.LogInformation("Loading current user information");
            var response = await MemberService.GetCurrentUserAsync();

            if (response.Success && response.Data != null)
            {
                member = response.Data;
                Logger.LogInformation("Successfully loaded user information");
            }
            else
            {
                message = response.Message ?? "Failed to load user information";
                messageClass = "alert-danger";
                Logger.LogWarning("Failed to load user information: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading your information. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error loading user information");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            isSaving = true;
            message = string.Empty;
            messageClass = string.Empty;

            Logger.LogInformation("Updating user profile");
            var response = await MemberService.UpdateCurrentUserAsync(member);

            if (response.Success)
            {
                Logger.LogInformation("Successfully updated user profile");
                NavigateBack();
            }
            else
            {
                message = response.Message ?? "Failed to update profile";
                messageClass = "alert-danger";
                Logger.LogWarning("Failed to update profile: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            message = "An error occurred while updating your profile. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error updating user profile");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/my-information");
    }
} 