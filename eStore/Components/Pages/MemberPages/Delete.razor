@page "/members/delete/{id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Delete> Logger

<PageTitle>Delete Member</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    <h3 class="card-title">Confirm Delete</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @messageClass" role="alert">
                            @message
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (member == null)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading">Member Not Found</h4>
                            <p>The member you're trying to delete could not be found.</p>
                            <hr>
                            <div class="d-flex gap-2">
                                <a href="/members" class="btn btn-primary">Return to Members List</a>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-warning mb-4">
                            <h4 class="alert-heading">Are you sure?</h4>
                            <p>Are you sure you want to delete this member? This action cannot be undone.</p>
                        </div>

                        <dl class="row">
                            <dt class="col-sm-3">Member ID</dt>
                            <dd class="col-sm-9">@member.MemberId</dd>

                            <dt class="col-sm-3">Email</dt>
                            <dd class="col-sm-9">@member.Email</dd>

                            <dt class="col-sm-3">Company Name</dt>
                            <dd class="col-sm-9">@member.CompanyName</dd>

                            <dt class="col-sm-3">City</dt>
                            <dd class="col-sm-9">@member.City</dd>

                            <dt class="col-sm-3">Country</dt>
                            <dd class="col-sm-9">@member.Country</dd>
                        </dl>

                        <div class="mt-4 d-flex gap-2">
                            <a href="/members" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Back to List
                            </a>
                            <button class="btn btn-danger" @onclick="HandleDelete" disabled="@isDeleting">
                                @if (isDeleting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">Deleting...</span>
                                }
                                else
                                {
                                    <i class="bi bi-trash"></i>
                                    <span class="ms-1">Confirm Delete</span>
                                }
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Member? member;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadMember();
    }

    private async Task LoadMember()
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            messageClass = string.Empty;

            Logger.LogInformation("Loading member for deletion with ID: {Id}", Id);
            member = await MemberService.GetMemberByIdAsync(Id);

            if (member == null)
            {
                message = $"Member with ID {Id} not found.";
                messageClass = "alert-warning";
                Logger.LogWarning("Member not found for deletion. ID: {Id}", Id);
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading member for deletion. ID: {Id}", Id);
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading the member. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error loading member for deletion. ID: {Id}", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleDelete()
    {
        if (member == null) return;

        try
        {
            isDeleting = true;
            
            var result = await MemberService.DeleteMemberAsync(Id);
            
            if (result.Success)
            {
                message = "Member deleted successfully!";
                messageClass = "alert-success";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/members", true);
            }
            else
            {
                message = result.Message ?? "Failed to delete member. Please try again.";
                messageClass = "alert-danger";
                
                if (result.Errors != null && result.Errors.Any())
                {
                    Logger.LogWarning("Member deletion errors: {Errors}", string.Join(", ", result.Errors));
                }
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while deleting member. ID: {Id}", Id);
        }
        catch (Exception ex)
        {
            message = "An error occurred while deleting the member. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error deleting member. ID: {Id}", Id);
        }
        finally
        {
            isDeleting = false;
        }
    }
}
