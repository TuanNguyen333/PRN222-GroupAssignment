@page "/members"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.SignalR.Client
@rendermode InteractiveServer
@inject IMemberService MemberService
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger

<PageTitle>Members</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Members</h2>
        <a href="/members/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add New Member
        </a>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <form @onsubmit="HandleSearch" class="row g-3">
                <div class="col-md-3">
                    <label for="searchEmail" class="form-label">Email</label>
                    <input type="text" class="form-control" id="searchEmail" @bind="searchEmail" placeholder="Enter email...">
                </div>
                <div class="col-md-3">
                    <label for="searchCompany" class="form-label">Company</label>
                    <input type="text" class="form-control" id="searchCompany" @bind="searchCompany" placeholder="Enter company...">
                </div>
                <div class="col-md-2">
                    <label for="searchCity" class="form-label">City</label>
                    <input type="text" class="form-control" id="searchCity" @bind="searchCity" placeholder="Enter city...">
                </div>
                <div class="col-md-2">
                    <label for="searchCountry" class="form-label">Country</label>
                    <input type="text" class="form-control" id="searchCountry" @bind="searchCountry" placeholder="Enter country...">
                </div>
                <div class="col-md-2 d-flex align-items-end gap-2">
                    <button type="submit" class="btn btn-primary flex-grow-1">
                        <i class="bi bi-search"></i> Search
                    </button>
                    <button type="button" class="btn btn-secondary" @onclick="ClearFilters">
                        <i class="bi bi-x-circle"></i> Clear
                    </button>
                </div>
            </form>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass" role="alert">
            @message
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (members == null || !members.Any())
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">No Members Found</h4>
            <p>We couldn't find any members matching your search criteria.</p>
            <hr>
            <p class="mb-0">
                Try these suggestions:
                <ul class="mb-0">
                    <li>Check if you entered the search terms correctly</li>
                    <li>Try using fewer filters</li>
                    <li>Clear all filters and try again</li>
                    <li>Check if there are any members in the database</li>
                </ul>
            </p>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Company Name</th>
                        <th>City</th>
                        <th>Country</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var member in members)
                    {
                        <tr>
                            <td>@member.Email</td>
                            <td>@member.CompanyName</td>
                            <td>@member.City</td>
                            <td>@member.Country</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/members/details/@member.MemberId" class="btn btn-sm btn-info me-1">
                                        <i class="bi bi-info-circle"></i> Details
                                    </a>
                                    <a href="/members/edit/@member.MemberId" class="btn btn-sm btn-primary me-1">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                    <a href="/members/delete/@member.MemberId" class="btn btn-sm btn-danger">
                                        <i class="bi bi-trash"></i> Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private List<Member>? members;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private string searchEmail = string.Empty;
    private string searchCompany = string.Empty;
    private string searchCity = string.Empty;
    private string searchCountry = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await InitializeSignalR();
        await LoadMembers();
    }

    private async Task InitializeSignalR()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/memberhub"))
                .WithAutomaticReconnect()
                .Build();

            hubConnection.On<string, int>("ReceiveMemberUpdate", async (action, memberId) =>
            {
                Logger.LogInformation("Received member update: {Action} for member {MemberId}", action, memberId);
                await LoadMembers();
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            Logger.LogInformation("SignalR Connected for Members");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SignalR Connection Error for Members hub");
            message = "Unable to connect to real-time updates.";
            messageClass = "alert-warning";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private async Task ClearFilters()
    {
        searchEmail = string.Empty;
        searchCompany = string.Empty;
        searchCity = string.Empty;
        searchCountry = string.Empty;
        await LoadMembers();
    }

    private async Task HandleSearch()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        try
        {
            isLoading = true;
            message = string.Empty;
            messageClass = string.Empty;
            
            Logger.LogInformation("Loading members with filters - Email: {Email}, Company: {Company}, City: {City}, Country: {Country}", 
                searchEmail, searchCompany, searchCity, searchCountry);
            
            // For now we'll just load all members
            // In a real implementation, you would add filtering parameters to the service
            members = await MemberService.GetAllMembersAsync();
            
            // Simple client-side filtering
            if (!string.IsNullOrWhiteSpace(searchEmail))
            {
                members = members?.Where(m => m.Email?.Contains(searchEmail, StringComparison.OrdinalIgnoreCase) == true).ToList();
            }
            
            if (!string.IsNullOrWhiteSpace(searchCompany))
            {
                members = members?.Where(m => m.CompanyName?.Contains(searchCompany, StringComparison.OrdinalIgnoreCase) == true).ToList();
            }
            
            if (!string.IsNullOrWhiteSpace(searchCity))
            {
                members = members?.Where(m => m.City?.Contains(searchCity, StringComparison.OrdinalIgnoreCase) == true).ToList();
            }
            
            if (!string.IsNullOrWhiteSpace(searchCountry))
            {
                members = members?.Where(m => m.Country?.Contains(searchCountry, StringComparison.OrdinalIgnoreCase) == true).ToList();
            }
            
            Logger.LogInformation("Successfully loaded {Count} members", members?.Count ?? 0);
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "Network error while loading members");
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            members = new List<Member>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading members");
            message = "An error occurred while loading members. Please try again later.";
            messageClass = "alert-danger";
            members = new List<Member>();
        }
        finally
        {
            isLoading = false;
        }
    }
}
