@page "/products"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ILogger<Index> Logger

<PageTitle>Products</PageTitle>

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Products</h2>
        <a href="/products/create" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Add New Product
        </a>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @messageClass" role="alert">
            @message
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (products?.Items == null || !products.Items.Any())
    {
        <div class="alert alert-info" role="alert">
            No products found. Click "Add New Product" to create one.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Category</th>
                        <th>Weight</th>
                        <th>Unit Price</th>
                        <th>Units in Stock</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in products.Items)
                    {
                        <tr>
                            <td>@product.ProductName</td>
                            <td>@(GetCategoryName(product.CategoryId))</td>
                            <td>@product.Weight</td>
                            <td>$@product.UnitPrice</td>
                            <td>@product.UnitsInStock</td>
                            <td>
                                <div class="btn-group" role="group">
                                    <a href="/products/edit/@product.ProductId" class="btn btn-sm btn-primary me-1">
                                        <i class="bi bi-pencil"></i> Edit
                                    </a>
                                    <a href="/products/delete/@product.ProductId" class="btn btn-sm btn-danger">
                                        <i class="bi bi-trash"></i> Delete
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (products.TotalPages > 1)
        {
            <nav aria-label="Product pagination">
                <ul class="pagination justify-content-center">
                    @for (int i = 1; i <= products.TotalPages; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => LoadProducts(i)">@i</button>
                        </li>
                    }
                </ul>
            </nav>
        }
    }
</div>

@code {
    private PagedResponse<Product>? products;
    private Dictionary<int, string> categoryNames = new();
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts(1);
    }

    private async Task LoadProducts(int page)
    {
        try
        {
            isLoading = true;
            currentPage = page;
            products = await ProductService.GetAllProductsAsync(page);
            if (products?.Items != null && products.Items.Any())
            {
                await LoadCategoryNames();
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading products");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading products. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while loading products");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCategoryNames()
    {
        try
        {
            foreach (var product in products!.Items)
            {
                if (!categoryNames.ContainsKey(product.CategoryId))
                {
                    var category = await CategoryService.GetCategoryByIdAsync(product.CategoryId);
                    categoryNames[product.CategoryId] = category?.CategoryName ?? $"Category {product.CategoryId}";
                }
            }
            Logger.LogInformation("Successfully loaded category names");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading category names");
        }
    }

    private string GetCategoryName(int categoryId)
    {
        return categoryNames.TryGetValue(categoryId, out var name) ? name : $"Category {categoryId}";
    }
}
