@page "/products/delete/{id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject ILogger<Delete> Logger

<PageTitle>Delete Product</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Delete Product</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @messageClass" role="alert">
                            @message
                            @if (messageClass == "alert-warning")
                            {
                                <div class="mt-2">
                                    <a href="/products" class="btn btn-primary">Back to List</a>
                                </div>
                            }
                        </div>
                    }

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (product != null)
                    {
                        <div class="alert alert-warning" role="alert">
                            <h4 class="alert-heading">Warning!</h4>
                            <p>Are you sure you want to delete this product?</p>
                            <hr>
                            <p class="mb-0">This action cannot be undone.</p>
                        </div>

                        <div class="card mb-3">
                            <div class="card-body">
                                <h5 class="card-title">Product Details</h5>
                                <dl class="row">
                                    <dt class="col-sm-3">Product Name</dt>
                                    <dd class="col-sm-9">@product.ProductName</dd>

                                    <dt class="col-sm-3">Category</dt>
                                    <dd class="col-sm-9">@categoryName</dd>

                                    <dt class="col-sm-3">Weight</dt>
                                    <dd class="col-sm-9">@product.Weight</dd>

                                    <dt class="col-sm-3">Unit Price</dt>
                                    <dd class="col-sm-9">$@product.UnitPrice</dd>

                                    <dt class="col-sm-3">Units in Stock</dt>
                                    <dd class="col-sm-9">@product.UnitsInStock</dd>
                                </dl>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <a href="/products" class="btn btn-secondary">
                                <i class="bi bi-arrow-left"></i> Back to List
                            </a>
                            <button class="btn btn-danger" @onclick="DeleteProduct" disabled="@isDeleting">
                                @if (isDeleting)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">Deleting...</span>
                                }
                                else
                                {
                                    <i class="bi bi-trash"></i>
                                    <span class="ms-1">Delete Product</span>
                                }
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;
    private string categoryName = string.Empty;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await ProductService.GetProductByIdAsync(Id);
            if (product != null)
            {
                var category = await CategoryService.GetCategoryByIdAsync(product.CategoryId);
                categoryName = category?.CategoryName ?? $"Category {product.CategoryId}";
                Logger.LogInformation("Successfully loaded product with ID {Id}", Id);
            }
            else
            {
                message = "Product not found.";
                messageClass = "alert-warning";
                Logger.LogWarning("Product with ID {Id} not found", Id);
            }
        }
        catch (HttpRequestException ex)
        {
            message = "Unable to connect to server. Please check your connection and try again.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Network error while loading data");
        }
        catch (Exception ex)
        {
            message = "An error occurred while loading data. Please try again later.";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Unexpected error while loading data");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteProduct()
    {
        try
        {
            isDeleting = true;
            var result = await ProductService.DeleteProductAsync(Id);
            if (result)
            {
                message = "Product deleted successfully!";
                messageClass = "alert-success";
                await Task.Delay(1000);
                NavigationManager.NavigateTo("/products", true);
            }
            else
            {
                message = "Failed to delete product. Please try again.";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = $"Error deleting product: {ex.Message}";
            messageClass = "alert-danger";
            Logger.LogError(ex, "Error deleting product");
        }
        finally
        {
            isDeleting = false;
        }
    }
}
