@page "/products/edit/{id:int}"
@using eStore.Models
@using eStore.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Logging
@rendermode InteractiveServer
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<Edit> Logger

<PageTitle>Edit Product</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Edit Product</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    }
                    else if (product == null)
                    {
                        <div class="alert alert-danger">Product not found.</div>
                    }
                    else
                    {
                        @if (!string.IsNullOrEmpty(message))
                        {
                            <div class="alert @messageClass">@message</div>
                        }

                        <EditForm Model="product" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="mb-3">
                                <label for="productName" class="form-label">Product Name</label>
                                <InputText id="productName" class="form-control" @bind-Value="product.ProductName" />
                                <ValidationMessage For="@(() => product.ProductName)" />
                            </div>

                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Category</label>
                                <InputSelect id="categoryId" class="form-control" @bind-Value="product.CategoryId">
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => product.CategoryId)" />
                            </div>

                            <div class="mb-3">
                                <label for="unitPrice" class="form-label">Unit Price</label>
                                <InputNumber id="unitPrice" class="form-control" @bind-Value="product.UnitPrice" />
                                <ValidationMessage For="@(() => product.UnitPrice)" />
                            </div>

                            <div class="mb-3">
                                <label for="unitsInStock" class="form-label">Units In Stock</label>
                                <InputNumber id="unitsInStock" class="form-control" @bind-Value="product.UnitsInStock" />
                                <ValidationMessage For="@(() => product.UnitsInStock)" />
                            </div>

                            <button type="submit" class="btn btn-primary">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Product? product;
    private List<Category>? categories;
    private string message = string.Empty;
    private string messageClass = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var productResponse = await ProductService.GetProductByIdAsync(Id);
            if (productResponse.Success && productResponse.Data != null)
            {
                product = productResponse.Data;
            }
            else
            {
                message = productResponse.Message ?? "Failed to load product";
                messageClass = "alert-danger";
            }

            var categoriesResponse = await CategoryService.GetAllCategoriesAsync();
            categories = categoriesResponse ?? new List<Category>();
            
            if (categories.Count == 0)
            {
                message = "No categories available";
                messageClass = "alert-warning";
            }
        }
        catch (Exception ex)
        {
            message = "Error loading data";
            messageClass = "alert-danger";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (product == null)
        {
            message = "No product data to update";
            messageClass = "alert-danger";
            return;
        }

        try
        {
            var response = await ProductService.UpdateProductAsync(Id, product);
            if (response.Success)
            {
                NavigationManager.NavigateTo("/products");
            }
            else
            {
                message = response.Message ?? "Failed to update product";
                messageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            message = "Error updating product";
            messageClass = "alert-danger";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/products");
    }
}
